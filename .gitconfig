[user]
    name = Jeff Wu
    email = wuthefwasthat@gmail.com
[core]
    editor = vim
    # editor = nvim
[alias]
    clo = clone --recursive
    # https://github.com/$1.git
    # git@github.com:$1.git

    # branch management
    b = branch -vv
    ba = branch -vv -a
    co = checkout
    com = checkout master
    cop = checkout -p
    new = checkout -b
    bd = branch -D
    bdm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
    # delete a branch (default to current branch).  if current branch deleted, checkout master
    bx = "!f() { \
      onbranch=$(git rev-parse --abbrev-ref HEAD); \
      branch=${1:-$onbranch}; \
      if [ \"$branch\" = \"master\" ]; then \
        echo \"Can't delete master!\";  \
        return 1;  \
      fi;  \
      if [ \"$branch\" = \"$onbranch\" ]; then \
        git checkout master;  \
      fi;  \
      git branch -D $branch;  \
    }; f"
    # delete remote branch
    bxr = "!f() { \
      onbranch=$(git rev-parse --abbrev-ref HEAD); \
      branch=${1:-$onbranch}; \
      git push origin :$branch; \
    }; f"
    # Remove branches that have already been merged with master, a.k.a. ‘delete merged’
    done = "!f() { \
      mybranch=$(git rev-parse --abbrev-ref HEAD); \
      if [ \"$mybranch\" != \"master\" ]; then git checkout master; git reset --hard $mybranch; fi; \
      git fetch; git rebase origin/master; git push origin master; \
      if [ \"$mybranch\" != \"master\" ]; then git branch -D $mybranch; git push origin :$mybranch; fi; \
    }; f"

    # remotes
    f = fetch --all --prune
    pu = "push -u"
    puf = "push -u -f"
    pl = "pull"
    plr = "pull --rebase"
    pla = !"git pull; git submodule foreach git pull origin master"
    track = "!f(){ branch=$(git rev-parse --abbrev-ref HEAD); cmd=\"git branch $branch -u ${1:-origin}/${2:-$branch}\"; echo $cmd; $cmd; }; f"
    untrack = "!f(){ branch=$(git rev-parse --abbrev-ref HEAD); cmd=\"git branch --unset-upstream ${1:-$branch}\"; echo $cmd; $cmd; }; f"
    # todo: get autocomplete for this
    # todo: get better prompt
    # i = !repl git
    i = "!f(){ \
         while true; do \
             read -e -p \"git $ \" line; \
             if [ -z \"$line\" ]; then continue; fi; \
             if [ \"$line\" == \"q\" ]; then break; fi; \
             if [ \"${line:0:1}\" == \"!\" ]; then \
                 eval \"${line:1}\"; \
             else \
                 eval \"git $line\"; \
             fi; \
         done }; f"

    # github
    pr = "!git push; hub pull-request"
    h = "!f() { hash=${1:-$(git rev-parse --abbrev-ref HEAD)}; hub browse -- tree/$hash; }; f"
    hi = "!hub browse -- issues"
    hin = "!hub browse -- issues/new"
    hp = "!f() { pr=$1; if [ -z \"$1\" ]; then hub browse -- pulls; else hub browse -- pull/$pr ; fi; }; f"
    hf = "!hub browse -- find/master"
    hop = "!f() { hub browse -- blob/master/$(git find \"$@\" | head -n 1); }; f"
    # hub log
    hl = "!f() { hash=${1:-$(git rev-parse HEAD)}; hub browse -- commits/$hash; }; f"
    # hub show
    hs = "!f() { hash=${1:-$(git rev-parse HEAD)}; hub browse -- commit/$hash; }; f"
    issue = "!hub issue"
    fork = "!hub fork"

    # working tree
    a = add
    aa = "!git add .; git add -u ."
    ap = "!f() { local dir=${1:-.}; git add -p $dir; }; f"
    # cleanup
    cle = clean -f -d
    # discard
    xx = "!f() { local dir=${1:-.}; git checkout -- $dir; }; f"
    # unstage
    z = "!f(){ local dir=${1:-.}; git reset HEAD $dir; }; f"

    # committing (optionally with message)
    c = "!f() { if [ $# -eq 0 ]; then git commit -v; else git commit -m \"$*\"; fi; }; f"
    # commit "squash"
    cs = "!f() { if [ $# -eq 0 ]; then git commit -v --amend; else git commit --amend -m \"$*\"; fi; }; f"
    # commit "fixup"
    cf = commit -v --amend --no-edit
    # add then commit variants
    ac = "!f() { if [ $# -eq 0 ]; then git commit -v -a; else git commit -a -m \"$*\"; fi; }; f"
    acs = "!f() { if [ $# -eq 0 ]; then git commit -v -a --amend; else git commit -a --amend -m \"$*\"; fi; }; f"
    acf = commit -v -a --amend --no-edit

    # cherry-pick
    cp = cherry-pick
    cpa = cherry-pick --abort
    cpc = cherry-pick --continue

    # rebase
    rb = rebase
    rbi = rebase -i
    rbin = "!f() { local n=${1:-1}; git rebase -i HEAD~$n; }; f"
    rba = rebase --abort
    rbs = rebase --skip
    rbc = "!git add .; git add -u .; git rebase --continue"
    rbo = "!f(){ branch=$(git rev-parse --abbrev-ref HEAD); git fetch && git rebase origin/$branch $@; }; f"
    rbm = rebase master
    rbom = "!git fetch && git rebase origin/master"

    # merge
    m = merge
    ma = merge --abort

    # open merge conflicts (good for rebase/cherry-pick/merge too)
    mop = "!f() { $(git editor) $(git diff --name-only --diff-filter=U); }; f"

    # diffs
    d = icdiff
    dc = icdiff --cached
    ds = diff --stat
    dop = "!f() { $(git editor) $(git diff --name-only $@); }; f"
    dm = diff master
    dom = "!f() { git fetch; git diff origin/master $@; }; f"
    do = "!f(){ branch=$(git rev-parse --abbrev-ref HEAD); git fetch && git diff origin/$branch $@; }; f"
    du = diff @{upstream}

    # status
    s = status
    sh = show
    shs = show --stat
    shop = "!f() { $(git editor) $(git show --pretty=\"format:\" --name-only $1); }; f"


    # tree
    l = log --color --graph --pretty='%C(yellow)%h%C(reset) %C(magenta)%cd%C(reset) %C(bold blue)%an%C(reset) %s%C(bold yellow)%d%C(reset)' --decorate --date=relative
    lg = log
    hash = rev-parse HEAD
    rl = reflog show --date=relative

    # file tools
    find = "!git ls-files | grep -i"
    op = "!f() { $(git editor) $(git ls-files | grep -i \"$@\"); }; f"
    # open edited
    eop = "! $(git editor) $(git ls-files --modified)"
    g = grep
    gi = grep -i
    # grep and open
    gop = "!f(){ $(git editor) $(git grep --name-only \"$@\"); }; f"
    giop = "!f(){ $(git editor) $(git grep -i --name-only \"$@\"); }; f"
    tree = ls-tree --full-tree -r HEAD

    # reset
    rs = reset
    rso = "!f(){ branch=$(git rev-parse --abbrev-ref HEAD); git fetch && git reset origin/$branch $@; }; f"
    rsh = reset --hard
    rsho = "!f(){ branch=$(git rev-parse --abbrev-ref HEAD); git fetch && git reset --hard origin/$branch $@; }; f"
    rshom = "!git fetch && git reset --hard origin/master"
    # rewind
    rw = "!f() { local n=${1:-1}; git reset HEAD~$n; }; f"
    rwh = "!f() { local n=${1:-1}; git reset --hard HEAD~$n; }; f"
    # revert
    rv = "!f() { local hash=${1:-HEAD}; git revert $hash; }; f"
    rva = revert --abort
    rvc = revert --continue

    # stash
    st = stash
    stl = stash list
    sta = stash apply
    std = stash drop
    sts = stash save
    stp = stash pop

    # bisection
    bs = bisect
    bsb = bisect bad
    bsg = bisect good
    bsr = bisect reset
    bss = bisect start

    # submodules
    smi = submodule init
    sma = submodule add
    smu = submodule update
    sms = submodule sync

    # fuzzy commands (require fzf)
    # fuzzy open
    zop = "!f() { \
      local file=$(git ls-files $(git rev-parse --show-toplevel) | fzf -m); \
      if [[ -z $file ]]; then return 1; fi; \
      $(git editor) $file; \
    }; f"
    # fuzzy grep (does only one file)
    zgop = "!f() { \
      local raw_selection=$(git grep -n '.*' | fzf); \
      if [[ -z $raw_selection ]]; then return 1; fi; \
      local selection=${raw_selection%:*}; \
      local file=${selection%:*}; \
      local line=${selection##*:}; \
      $(git editor) +\"$line\" \"$file\"; \
    }; f"
    # fuzzy checkout (could be much improved, have tags, branches, remotes)
    zco = "!f() { \
      local commit=$(git log --oneline | fzf | awk '{ print $1 }'); \
      if [[ -z $commit ]]; then return 1; fi; \
      git checkout $commit; \
    }; f"
    # fuzzy show
    zsh = "!f() { \
      local commit=$(git log --oneline | fzf | awk '{ print $1 }'); \
      if [[ -z $commit ]]; then return 1; fi; \
      git show $commit; \
    }; f"
    # fuzzy diff
    zd = "!f() { \
      local commit=$(git log --oneline | fzf | awk '{ print $1 }'); \
      if [[ -z $commit ]]; then return 1; fi; \
      git diff $commit; \
    }; f"
    # TODO: make a single command that lists
    #       commits, tags, branches, remotes
    #       use in the fuzzy stuff

    # miscellaneous
    # Find commits by commit message
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=\"$@\"; }; f"
    # List contributors with number of commits
    contributors = shortlog --summary --numbered
    root = rev-parse --show-toplevel

    # configuration
    editor = config --get core.editor
    # editor = ! echo "emacsclient -c"
    alias = "!f() { pattern=$@; rand=$(uuidgen); git config --get-regexp ^alias\\. | sed -e s/^alias\\.// | grep \"$pattern\" | sort | sed -e \"s| |$rand|\" | awk -F \"$rand\" '{ printf \"%12-s = %s\\n\", $1, $2 }'; }; f"


[color]
    ui = true
[push]
    default = current
# [branch]
#     autosetupmerge = always
#     autosetuprebase = always
