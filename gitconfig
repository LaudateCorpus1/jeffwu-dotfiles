[user]
    name = Jeff Wu
    email = wuthefwasthat@gmail.com
[core]
    editor = /usr/bin/vim
[alias]
    clo = clone --recursive
    # https://github.com/$1.git
    # git@github.com:$1.git

    # branch management
    b = branch
    br = "!git branch | grep -v '^\\s*zz'"
    co = checkout
    new = checkout -b
    # delete a branch (default to current branch).  if current branch deleted, checkout master
    del = "!f() { mybranch=$(git rev-parse --abbrev-ref HEAD); dbranch=${1:-$mybranch}; if [ \"$mybranch\" = \"$dbranch\" ]; then git checkout master; fi; git branch -D $dbranch; }; f"

    # remotes
    f = fetch --all --prune
    pr = "!hub pull-request"
    pu = "push -u"
    puf = "push -u -f"
    pl = "pull"
    plr = "pull --rebase"
    track = "!f(){ branch=$(git rev-parse --abbrev-ref HEAD); cmd=\"git branch $branch -u ${1:-origin}/${2:-$branch}\"; echo $cmd; $cmd; }; f"
    untrack = "!f(){ branch=$(git rev-parse --abbrev-ref HEAD); cmd=\"git branch --unset-upstream ${1:-$branch}\"; echo $cmd; $cmd; }; f"

    # working tree
    a = add
    aa = "!git add .; git add -u ."
    ap = add -p .
    # cleanup
    cle = clean -f -d
    xx = "!f() { local dir=${1:-.}; git checkout -- $dir; }; f"
    unstage = "!f(){ local dir=${1:-.}; git reset HEAD $dir; }; f"

    # committing (optionally with message)
    c = "!f() { if [ $# -eq 0 ]; then git commit -v; else git commit -m \"$*\"; fi; }; f"
    # commit "squash"
    cs = "!f() { if [ $# -eq 0 ]; then git commit -v --amend; else git commit --amend -m \"$*\"; fi; }; f"
    # commit "fixup"
    cf = commit -v --amend --no-edit
    # add then commit variants
    ac = "!f() { if [ $# -eq 0 ]; then git commit -v -a; else git commit -a -m \"$*\"; fi; }; f"
    acs = "!f() { if [ $# -eq 0 ]; then git commit -v -a --amend; else git commit -a --amend -m \"$*\"; fi; }; f"
    acf = commit -v -a --amend --no-edit

    # cherry-pick
    cp = cherry-pick
    cpa = cherry-pick --abort
    cpc = cherry-pick --continue

    # rebase
    rb = rebase
    rbi = rebase -i
    rba = rebase --abort
    rbc = "!git add .; git add -u .; git rebase --continue"
    rbo = "!f(){ branch=$(git rev-parse --abbrev-ref HEAD); git fetch && git rebase origin/$branch; }; f"
    rbom = "!git fetch && git rebase origin/master"

    # merge
    m = merge
    ma = merge --abort

    # open merge conflicts (good for rebase/cherry-pick/merge too)
    mop = "!f() { vim $(git diff --name-only --diff-filter=U); }; f"

    # diffs
    diff = icdiff
    d = icdiff
    dc = icdiff --cached
    ds = diff --stat

    # status
    s = status
    sh = show
    shs = show --stat

    # tree
    l = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    lg = log
    hash = rev-parse HEAD
    rl = reflog

    # file tools
    find = "!git ls-files | grep -i"
    g = grep
    gop = "!f(){ vim $(git grep --name-only $@); }; f"
    tree = ls-tree --full-tree -r HEAD

    # reset
    rs = reset
    rsh = reset --hard
    rw = "!f() { local n=${1:-1}; git reset HEAD~$n; }; f"
    # revert
    rv = revert
    rva = revert --abort
    rvc = revert --continue

    # stash
    st = stash
    stl = stash list
    sta = stash apply
    sts = stash save
    stp = stash pop

    # bisection
    bs = bisect
    bsb = bisect bad
    bsg = bisect good
    bsr = bisect reset
    bss = bisect start

    # miscellaneous
    alias = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ / | sort

[color]
    ui = true
[push]
    default = current
# [branch]
# 	autosetupmerge = always
# 	autosetuprebase = always
