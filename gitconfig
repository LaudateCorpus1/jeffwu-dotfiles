[user]
    name = Jeff Wu
    email = wuthefwasthat@gmail.com
[core]
    editor = vim
    # editor = nvim
[alias]
    # configuration
    differ = "!f() { echo diff; }; f"
    # differ = "!f() { echo icdiff; }; f"
    editor = config --get core.editor
    # editor = ! echo "emacsclient -c"
    alias = "!f() { pattern=$@; rand=$(uuidgen); git config --get-regexp ^alias\\. | sed -e s/^alias\\.// | grep \"$pattern\" | sort | sed -e \"s| |$rand|\" | awk -F \"$rand\" '{ printf \"%12-s = %s\\n\", $1, $2 }'; }; f"

    # utils
    root = rev-parse --show-toplevel
    # functions screw up directory: see https://stackoverflow.com/questions/26243145/git-aliases-operate-in-the-wrong-directory
    relative = "!f() { if [ -n \"$GIT_PREFIX\" ]; then echo \"$GIT_PREFIX\"; else echo \".\"; fi; }; f"
    # chains multiple commands (note: after first one, can't have spaces, for now)
    chain = "!f() { if [ -n \"$GIT_PREFIX\" ]; then cd \"$GIT_PREFIX\"; fi; git $1; shift; if [ $# -ne 0 ]; then git chain $@; fi; }; f"

    # setup
    clo = clone --recursive
    in = '!git init && git commit -m "root" --allow-empty'
    # https://github.com/$1.git
    # git@github.com:$1.git

    # branch management
    b = branch -vv
    ba = branch -vv -a
    co = checkout
    com = checkout master
    cop = checkout -p
    new = checkout -b
    bd = branch -D
    bdm = "!gitty delete_merged_branches"
    # delete a branch (default to current branch).  if current branch deleted, checkout master
    bx = "!f() { \
      onbranch=$(git rev-parse --abbrev-ref HEAD); \
      branch=${1:-$onbranch}; \
      if [ \"$branch\" = \"master\" ]; then \
        echo \"Can't delete master!\";  \
        return 1;  \
      fi;  \
      if [ \"$branch\" = \"$onbranch\" ]; then \
        git checkout master;  \
      fi;  \
      git branch -D $branch;  \
    }; f"
    # delete remote branch
    bxr = "!f() { \
      onbranch=$(git rev-parse --abbrev-ref HEAD); \
      branch=${1:-$onbranch}; \
      git push origin :$branch; \
    }; f"
    # Remove branches that have already been merged with master, a.k.a. ‘delete merged’
    done = "!f() { \
      mybranch=$(git rev-parse --abbrev-ref HEAD); \
      if [ \"$mybranch\" != \"master\" ]; then git checkout master; git reset --hard $mybranch; fi; \
      git fetch; git rebase origin/master; git push origin master; \
      if [ \"$mybranch\" != \"master\" ]; then git branch -D $mybranch; git push origin :$mybranch; fi; \
    }; f"

    # remotes
    f = "!f() { git chain 'fetch --all --prune' $@; }; f"
    pu = "push -u"
    put = "push --tags"
    puf = "push -u --force-with-lease"
    # pl = "pull"
    p = "pull --rebase"
    pullsubmodules = "submodule foreach git pull origin master"
    rmp = "!f(){ remote=${1:-origin}; git remote prune $remote; }; f"
    track = "!f(){ branch=$(git rev-parse --abbrev-ref HEAD); cmd=\"git branch $branch -u ${1:-origin}/${2:-$branch}\"; echo $cmd; $cmd; }; f"
    untrack = "!f(){ branch=$(git rev-parse --abbrev-ref HEAD); cmd=\"git branch --unset-upstream ${1:-$branch}\"; echo $cmd; $cmd; }; f"
    # todo: get autocomplete for this
    # todo: get better prompt
    # i = !repl git
    i = "!f(){ \
         while true; do \
             read -e -p \"git $ \" line; \
             if [ -z \"$line\" ]; then continue; fi; \
             if [ \"$line\" == \"q\" ]; then break; fi; \
             if [ \"${line:0:1}\" == \"!\" ]; then \
                 eval \"${line:1}\"; \
             else \
                 eval \"git $line\"; \
             fi; \
         done }; f"

    # github
    pr = "!git push; hub pull-request"
    h = "!f() { hash=${1:-$(git rev-parse --abbrev-ref HEAD)}; hub browse -- tree/$hash; }; f"
    hi = "!hub browse -- issues"
    hin = "!hub browse -- issues/new"
    hp = "!f() { pr=$1; if [ -z \"$1\" ]; then hub browse -- pulls; else hub browse -- pull/$pr ; fi; }; f"
    hf = "!hub browse -- find/master"
    hop = "!f() { hub browse -- blob/master/$(git find \"$@\" | head -n 1); }; f"
    # hub log
    hl = "!f() { hash=${1:-$(git rev-parse HEAD)}; hub browse -- commits/$hash; }; f"
    # hub show
    hs = "!f() { hash=${1:-$(git rev-parse HEAD)}; hub browse -- commit/$hash; }; f"
    issue = "!hub issue"
    fork = "!hub fork"

    # working tree
    a = add
    aahelper = "!git add .; git add -u ."
    aa = "!f() { git chain 'aahelper' $@; }; f"
    aac = "!f() { git aahelper; git ac $@; }; f"
    ap = "!f() { local dir=${1:-.}; git add -p $dir; }; f"
    # cleanup
    cle = clean -f -d
    # discard
    xx = "!f() { if [ -n \"$GIT_PREFIX\" ]; then cd \"$GIT_PREFIX\"; fi; local dir=${1:-.}; git checkout -- $dir; }; f"
    # unstage
    z = "!f(){ if [ -n \"$GIT_PREFIX\" ]; then cd \"$GIT_PREFIX\"; fi; local dir=${1:-.}; git reset HEAD $dir; }; f"

    # committing (optionally with message)
    c = "!f() { if [ $# -eq 0 ]; then git commit -v; else git commit -m \"$*\"; fi; }; f"
    # commit "squash"
    cs = "!f() { if [ $# -eq 0 ]; then git commit -v --amend; else git commit --amend -m \"$*\"; fi; }; f"
    # commit "fixup"
    cf = commit -v --amend --no-edit
    # add then commit variants
    ac = "!f() { if [ $# -eq 0 ]; then git commit -v -a; else git commit -a -m \"$*\"; fi; }; f"
    acs = "!f() { if [ $# -eq 0 ]; then git commit -v -a --amend; else git commit -a --amend -m \"$*\"; fi; }; f"
    acf = "!f() { git chain 'commit -v -a --amend --no-edit' $@; }; f"

    # cherry-pick
    cp = cherry-pick
    cpa = cherry-pick --abort
    cpc = cherry-pick --continue

    # rebase
    rb = rebase
    rbi = rebase -i
    rbin = "!f() { local n=${1:-1}; git rebase -i HEAD~$n; }; f"
    rba = rebase --abort
    rbs = rebase --skip
    rbc = "!git add .; git add -u .; git rebase --continue"
    rbo = "!f(){ branch=$(git rev-parse --abbrev-ref HEAD); git rebase origin/$branch $@; }; f"
    rboi = "!f(){ branch=$(git rev-parse --abbrev-ref HEAD); git rebase origin/$branch -i $@; }; f"
    rbm = rebase master
    rbmi = rebase master -i
    rbom = rebase origin/master
    rbomi = rebase origin/master -i
    from = "!f() { git chain fetch rbom $@; }; f"
    fro = "!f() { git chain fetch rbo $@; }; f"

    # merge
    m = merge
    ma = merge --abort

    # open merge conflicts (good for rebase/cherry-pick/merge too)
    mop = "!f() { $(git editor) $(git diff --name-only --diff-filter=U); }; f"

    # diffs
    d = "!git $(git differ)"
    dc = "!git $(git differ) --cached"
    dcs = "!git --no-pager -c color.diff=always diff --stat --cached"
    ds = "!git --no-pager -c color.diff=always diff --stat"
    dso = "!f(){ branch=$(git rev-parse --abbrev-ref HEAD); git diff --stat origin/$branch $@; }; f"
    dsom = "!git --no-pager -c color.diff=always diff --stat origin/master"
    dsm = "!git --no-pager -c color.diff=always diff --stat master"
    dop = "!f() { $(git editor) $(git diff --name-only $@); }; f"
    dm = "!git $(git differ) master"
    dom = "!git $(git differ) origin/master"
    do = "!f(){ branch=$(git rev-parse --abbrev-ref HEAD); git $(git differ) origin/$branch $@; }; f"
    du = "!git $(git differ) @{upstream}"

    # status
    s = "!gitty status"
    sh = show
    sho = "!f(){ branch=$(git rev-parse --abbrev-ref HEAD); git show origin/$branch $@; }; f"
    shom = show origin/master
    shs = "!git --no-pager show --stat"
    shso = "!f(){ branch=$(git rev-parse --abbrev-ref HEAD); git --no-pager show --stat origin/$branch $@; }; f"
    shsom = "!git --no-pager show --stat origin/master"
    shop = "!f() { $(git editor) $(git show --pretty=\"format:\" --name-only $1); }; f"


    # tree
    l = log --color --graph --pretty='%C(yellow)%h%C(reset) %Cred%cd%C(reset) %C(bold blue)%an%C(reset) %s%C(bold yellow)%d%C(reset)' --decorate --date=relative
    ls = log --color --pretty=format:'%C(yellow)%h%C(reset) %Cred%cd%C(reset) %C(bold blue)%an%C(reset) %s%C(bold yellow)%d%C(reset)' --decorate --date=relative --numstat
    lo = "!f(){ branch=$(git rev-parse --abbrev-ref HEAD); git log origin/$branch $@; }; f"
    lom = log origin/master
    lg = log
    hash = rev-parse HEAD
    rl = reflog show --date=relative

    # file tools
    find = "!f() { if [ -n \"$GIT_PREFIX\" ]; then cd \"$GIT_PREFIX\"; fi; git ls-files | grep -i $@; }; f"
    op = "!f() {  if [ -n \"$GIT_PREFIX\" ]; then cd \"$GIT_PREFIX\"; fi; $(git editor) $(git ls-files | grep -i \"$@\"); }; f"
    # open edited
    eop = "! $(git editor) $(git ls-files --modified)"

    g = "!f() { if [ -n \"$GIT_PREFIX\" ]; then cd \"$GIT_PREFIX\"; fi; git --no-pager grep \"$@\"; }; f"
    gi = "!f() { if [ -n \"$GIT_PREFIX\" ]; then cd \"$GIT_PREFIX\"; fi; git --no-pager grep -i \"$@\"; }; f"
    # grep and open
    gop = "!f(){ if [ -n \"$GIT_PREFIX\" ]; then cd \"$GIT_PREFIX\"; fi; $(git editor) $(git grep --name-only \"$@\"); }; f"
    giop = "!f(){ if [ -n \"$GIT_PREFIX\" ]; then cd \"$GIT_PREFIX\"; fi; $(git editor) $(git grep -i --name-only \"$@\"); }; f"
    tree = ls-tree -r HEAD

    # reset
    rs = reset
    rso = "!f(){ branch=$(git rev-parse --abbrev-ref HEAD); git reset origin/$branch $@; }; f"
    rsom = "!git reset origin/master"
    rsh = reset --hard
    rsho = "!f(){ branch=$(git rev-parse --abbrev-ref HEAD); git reset --hard origin/$branch $@; }; f"
    rshom = "!git reset --hard origin/master"
    # rewind
    rw = "!f() { local n=${1:-1}; git reset HEAD~$n; }; f"
    rwh = "!f() { local n=${1:-1}; git reset --hard HEAD~$n; }; f"
    # revert
    rv = "!f() { local hash=${1:-HEAD}; git revert $hash; }; f"
    rva = revert --abort
    rvc = revert --continue

    # stash
    # TODO: reimplement this using branches
    # $ git config --global alias.stsh 'stash --keep-index'
    # git config --global alias.staash 'stash --include-untracked'
    # git config --global alias.staaash 'stash --all'
    st = "!f() { git chain stash $@; }; f"
    stl = stash list
    sta = stash apply
    std = stash drop
    sts = stash save
    stp = stash pop

    # tags
    t = tag
    td = tag -d

    # bisection
    bs = bisect
    bsb = bisect bad
    bsg = bisect good
    bsr = bisect reset
    bss = bisect start

    # submodules
    smi = submodule init
    sma = submodule add
    smu = submodule update
    sms = submodule sync

    # fuzzy commands (require fzf)
    zh = "!gitty fuzzy_hash"
    # get file
    zf = "!f() { \
      local file=$(git ls-files $(git rev-parse --show-toplevel) | fzf -m); \
      if [[ -z $file ]]; then return 1; fi; \
      echo \"$file\"; \
    }; f"
    zop = "!gitty fuzzy_open"
    # fuzzy grep (does only one file)
    zgop = "!f() { \
      local raw_selection=$(git grep -n '.*' | fzf); \
      if [[ -z $raw_selection ]]; then return 1; fi; \
      local selection=${raw_selection%:*}; \
      local file=${selection%:*}; \
      local line=${selection##*:}; \
      $(git editor) +\"$line\" \"$file\"; \
    }; f"
    zco = "!gitty fuzzy_checkout"
    # fuzzy show
    zsh = "!f() { \
      local commit=$(git zh); \
      if [[ -z $commit ]]; then return 1; fi; \
      git show $commit; \
    }; f"
    # fuzzy diff
    zd = "!f() { \
      local commit=$(git zh); \
      if [[ -z $commit ]]; then return 1; fi; \
      git $(git differ) $commit; \
    }; f"
    # TODO: make a single command that lists
    #       commits, tags, branches, remotes
    #       use in the fuzzy stuff

    # miscellaneous
    # List contributors with number of commits
    contributors = shortlog --summary --numbered

[color]
    # diff = always
    ui = true
[push]
    default = current
# [branch]
#     autosetupmerge = always
#     autosetuprebase = always
